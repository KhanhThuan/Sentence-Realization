train:499 sentences
=> Optimizing Lambda: [0.1,0.2,-0.1]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10029 / 12293 = 0.8158
BLEU_precision(3) = 8494 / 11768 = 0.7218
BLEU_precision(4) = 7190 / 11244 = 0.6395
BLEU_precision = 0.7833
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7833

 
	========================================================
train:499 sentences
=> Optimizing Lambda: [0.1,0.2,-0.1]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10029 / 12293 = 0.8158
BLEU_precision(3) = 8494 / 11768 = 0.7218
BLEU_precision(4) = 7190 / 11244 = 0.6395
BLEU_precision = 0.7833
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7833

 
	========================================================
train:499 sentences
=> Optimizing Lambda: [-0.05,-0.6577977590753961,0.46016061237234096]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 9317 / 12293 = 0.7579
BLEU_precision(3) = 7376 / 11768 = 0.6268
BLEU_precision(4) = 5746 / 11244 = 0.5110
BLEU_precision = 0.7019
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7019

 
	========================================================
train:499 sentences
=> Optimizing Lambda: [-0.05,-0.6577977590753961,0.46016061237234096]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 9317 / 12293 = 0.7579
BLEU_precision(3) = 7376 / 11768 = 0.6268
BLEU_precision(4) = 5746 / 11244 = 0.5110
BLEU_precision = 0.7019
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7019

 
	========================================================
train:499 sentences
=> Optimizing Lambda: [-0.21052430917292875,0.981831267676273,8693020.75161818]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 9327 / 12293 = 0.7587
BLEU_precision(3) = 7382 / 11768 = 0.6273
BLEU_precision(4) = 5759 / 11244 = 0.5122
BLEU_precision = 0.7027
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7027

 
	========================================================
train:499 sentences
=> Optimizing Lambda: [-0.21052430917292875,0.981831267676273,8693020.75161818]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 9327 / 12293 = 0.7587
BLEU_precision(3) = 7382 / 11768 = 0.6273
BLEU_precision(4) = 5759 / 11244 = 0.5122
BLEU_precision = 0.7027
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7027

 
	========================================================
train:100 sentences
=> Optimizing Lambda: [3300.6444589634457,7929434.30054603,-27264.54821554008]
test:50 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 1429 / 1429 = 1.0000
BLEU_precision(2) = 1024 / 1379 = 0.7426
BLEU_precision(3) = 789 / 1329 = 0.5937
BLEU_precision(4) = 602 / 1279 = 0.4707
BLEU_precision = 0.6749
Length of candidate corpus = 1429
Effective length of reference corpus = 1429
BLEU_BP = 1.0000
  => BLEU = 0.6749

 
	========================================================
train:100 sentences
=> Optimizing Lambda: [3300.6444589634457,7929434.30054603,-27264.54821554008]
test:50 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 1429 / 1429 = 1.0000
BLEU_precision(2) = 1024 / 1379 = 0.7426
BLEU_precision(3) = 789 / 1329 = 0.5937
BLEU_precision(4) = 602 / 1279 = 0.4707
BLEU_precision = 0.6749
Length of candidate corpus = 1429
Effective length of reference corpus = 1429
BLEU_BP = 1.0000
  => BLEU = 0.6749

 
	========================================================
train:500 sentences
=> Optimizing Lambda: [-1226.468439333556,3665.2324727412088,3143.6345487968056]
test:400 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 10179 / 10179 = 1.0000
BLEU_precision(2) = 6771 / 9779 = 0.6924
BLEU_precision(3) = 4973 / 9379 = 0.5302
BLEU_precision(4) = 3485 / 8980 = 0.3881
BLEU_precision = 0.6144
Length of candidate corpus = 10179
Effective length of reference corpus = 10179
BLEU_BP = 1.0000
  => BLEU = 0.6144

 
	========================================================
train:500 sentences
=> Optimizing Lambda: [-0.13287646509006532,-0.6577977590753961,-0.44235450692001854]
test:400 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 10179 / 10179 = 1.0000
BLEU_precision(2) = 7458 / 9779 = 0.7627
BLEU_precision(3) = 5891 / 9379 = 0.6281
BLEU_precision(4) = 4595 / 8980 = 0.5117
BLEU_precision = 0.7036
Length of candidate corpus = 10179
Effective length of reference corpus = 10179
BLEU_BP = 1.0000
  => BLEU = 0.7036

 
	========================================================
train:1000 sentences
=> Optimizing Lambda: [-0.050006688033419906,-0.6577977590753961,-4.452980779849642E-5]
test:400 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 8414 / 8414 = 1.0000
BLEU_precision(2) = 5943 / 8014 = 0.7416
BLEU_precision(3) = 4535 / 7615 = 0.5955
BLEU_precision(4) = 3405 / 7218 = 0.4717
BLEU_precision = 0.6756
Length of candidate corpus = 8414
Effective length of reference corpus = 8414
BLEU_BP = 1.0000
  => BLEU = 0.6756

 
	========================================================
train:1000 sentences
=> Optimizing Lambda: [-0.05,-0.5713556223455967,0.05]
test:400 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 8414 / 8414 = 1.0000
BLEU_precision(2) = 5916 / 8014 = 0.7382
BLEU_precision(3) = 4527 / 7615 = 0.5945
BLEU_precision(4) = 3412 / 7218 = 0.4727
BLEU_precision = 0.6749
Length of candidate corpus = 8414
Effective length of reference corpus = 8414
BLEU_BP = 1.0000
  => BLEU = 0.6749

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [0.05,0.8593774528720801,-0.055347593582887704]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4202 / 5552 = 0.7568
BLEU_precision(3) = 3301 / 5352 = 0.6168
BLEU_precision(4) = 2534 / 5152 = 0.4918
BLEU_precision = 0.6922
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.6922

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [0.05,0.8593774528720801,-0.055347593582887704]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4202 / 5552 = 0.7568
BLEU_precision(3) = 3301 / 5352 = 0.6168
BLEU_precision(4) = 2534 / 5152 = 0.4918
BLEU_precision = 0.6922
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.6922

 
	========================================================
train:10 sentences
=> Optimizing Lambda: [-0.05,-0.05,-0.1]
test:2 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 42 / 42 = 1.0000
BLEU_precision(2) = 32 / 40 = 0.8000
BLEU_precision(3) = 25 / 38 = 0.6579
BLEU_precision(4) = 19 / 36 = 0.5278
BLEU_precision = 0.7260
Length of candidate corpus = 42
Effective length of reference corpus = 42
BLEU_BP = 1.0000
  => BLEU = 0.7260

 
	========================================================
train:10 sentences
=> Optimizing Lambda: [-3.341598746054889E-17,-0.05,0.04999999620769821]
test:2 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 42 / 42 = 1.0000
BLEU_precision(2) = 32 / 40 = 0.8000
BLEU_precision(3) = 25 / 38 = 0.6579
BLEU_precision(4) = 19 / 36 = 0.5278
BLEU_precision = 0.7260
Length of candidate corpus = 42
Effective length of reference corpus = 42
BLEU_BP = 1.0000
  => BLEU = 0.7260

 
	========================================================
train:10 sentences
=> Optimizing Lambda: [-3.341598746054889E-17,-0.05,0.04999999620769821]
test:2 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 42 / 42 = 1.0000
BLEU_precision(2) = 32 / 40 = 0.8000
BLEU_precision(3) = 25 / 38 = 0.6579
BLEU_precision(4) = 19 / 36 = 0.5278
BLEU_precision = 0.7260
Length of candidate corpus = 42
Effective length of reference corpus = 42
BLEU_BP = 1.0000
  => BLEU = 0.7260

 
	========================================================
train:10 sentences
=> Optimizing Lambda: [-3.341598746054889E-17,-0.05,0.04999999620769821]
test:2 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 42 / 42 = 1.0000
BLEU_precision(2) = 32 / 40 = 0.8000
BLEU_precision(3) = 25 / 38 = 0.6579
BLEU_precision(4) = 19 / 36 = 0.5278
BLEU_precision = 0.7260
Length of candidate corpus = 42
Effective length of reference corpus = 42
BLEU_BP = 1.0000
  => BLEU = 0.7260

 
	========================================================
train:10 sentences
=> Optimizing Lambda: [-3.341598746054889E-17,-0.05,0.04999999620769821]
test:2 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 42 / 42 = 1.0000
BLEU_precision(2) = 33 / 40 = 0.8250
BLEU_precision(3) = 28 / 38 = 0.7368
BLEU_precision(4) = 24 / 36 = 0.6667
BLEU_precision = 0.7979
Length of candidate corpus = 42
Effective length of reference corpus = 42
BLEU_BP = 1.0000
  => BLEU = 0.7979

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [0.05,7.628951924593067E-4,-5.029322692678147E11]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4288 / 5552 = 0.7723
BLEU_precision(3) = 3420 / 5352 = 0.6390
BLEU_precision(4) = 2666 / 5152 = 0.5175
BLEU_precision = 0.7109
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.7109

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [-12.464347710289957,-0.6577977590753961,-5.469906598431563E15]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 3945 / 5552 = 0.7106
BLEU_precision(3) = 2871 / 5352 = 0.5364
BLEU_precision(4) = 1975 / 5152 = 0.3833
BLEU_precision = 0.6183
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.6183

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [-12.464347710289957,-0.6577977590753961,-5.469906598431563E15]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 3945 / 5552 = 0.7106
BLEU_precision(3) = 2871 / 5352 = 0.5364
BLEU_precision(4) = 1975 / 5152 = 0.3833
BLEU_precision = 0.6183
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.6183

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [-12.464347710289957,-0.6577977590753961,-5.469906598431563E15]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 3945 / 5552 = 0.7106
BLEU_precision(3) = 2871 / 5352 = 0.5364
BLEU_precision(4) = 1975 / 5152 = 0.3833
BLEU_precision = 0.6183
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.6183

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [0.05,-0.2974935383022126,0.175]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4406 / 5552 = 0.7936
BLEU_precision(3) = 3653 / 5352 = 0.6825
BLEU_precision(4) = 2995 / 5152 = 0.5813
BLEU_precision = 0.7491
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.7491

 
	========================================================
train:200 sentences
=> Optimizing Lambda: [-19.864606864529904,4.153308154484208E15,-1.1706222002748015]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4296 / 5552 = 0.7738
BLEU_precision(3) = 3428 / 5352 = 0.6405
BLEU_precision(4) = 2688 / 5152 = 0.5217
BLEU_precision = 0.7131
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.7131

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
=> Optimizing Lambda: [-1.0529148517942134E-9,-0.6577977590753961,0.46016061237234096]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 9570 / 12293 = 0.7785
BLEU_precision(3) = 7772 / 11768 = 0.6604
BLEU_precision(4) = 6261 / 11244 = 0.5568
BLEU_precision = 0.7315
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7315

 
	========================================================
train:200 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
=> Optimizing Lambda: [0.04699954805175292,2.750969892442886E12,4.3698727375931856E14]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4570 / 5552 = 0.8231
BLEU_precision(3) = 3897 / 5352 = 0.7281
BLEU_precision(4) = 3308 / 5152 = 0.6421
BLEU_precision = 0.7876
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.7876

 
	========================================================
train:200 sentences
NGRAM SMOOTH Method: Add one Smoothing
=> Optimizing Lambda: [-158.13593414132416,2.0577786611560332E13,6.786210296750555E14]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4595 / 5552 = 0.8276
BLEU_precision(3) = 3940 / 5352 = 0.7362
BLEU_precision(4) = 3356 / 5152 = 0.6514
BLEU_precision = 0.7937
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.7937

 
	========================================================
train:200 sentences
NGRAM SMOOTH Method: Modified Kneser-ney Smothing by Kylm
=> Optimizing Lambda: [-70.69801203219343,4.6898228242528456E16,-2.7457749172640007]
test:200 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 5752 / 5752 = 1.0000
BLEU_precision(2) = 4323 / 5552 = 0.7786
BLEU_precision(3) = 3499 / 5352 = 0.6538
BLEU_precision(4) = 2796 / 5152 = 0.5427
BLEU_precision = 0.7250
Length of candidate corpus = 5752
Effective length of reference corpus = 5752
BLEU_BP = 1.0000
  => BLEU = 0.7250

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Add one Smoothing
=> Optimizing Lambda: [-0.6109403606749327,1.8368550528726916E14,3.97771370237394E15]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10211 / 12293 = 0.8306
BLEU_precision(3) = 8761 / 11768 = 0.7445
BLEU_precision(4) = 7497 / 11244 = 0.6668
BLEU_precision = 0.8013
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.8013

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
=> Optimizing Lambda: [-0.00986021299222462,7.27413172484976E17,2.2288334641864368E15]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10127 / 12293 = 0.8238
BLEU_precision(3) = 8613 / 11768 = 0.7319
BLEU_precision(4) = 7323 / 11244 = 0.6513
BLEU_precision = 0.7916
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7916

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
=> Optimizing Lambda: [-0.00986021299222462,7.27413172484976E17,2.2288334641864368E15]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10127 / 12293 = 0.8238
BLEU_precision(3) = 8613 / 11768 = 0.7319
BLEU_precision(4) = 7323 / 11244 = 0.6513
BLEU_precision = 0.7916
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.7916

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Add one Smoothing
=> Optimizing Lambda: [-0.6541450753703264,2.8545816904647444E14,3.7796424090827615E15]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10236 / 12293 = 0.8327
BLEU_precision(3) = 8775 / 11768 = 0.7457
BLEU_precision(4) = 7512 / 11244 = 0.6681
BLEU_precision = 0.8025
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.8025

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Modified Kneser-ney Smothing by Kylm
=> Optimizing Lambda: [-1562.2322623758394,4.9088026535565776E16,-4.624065047234116]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 9227 / 12293 = 0.7506
BLEU_precision(3) = 7213 / 11768 = 0.6129
BLEU_precision(4) = 5523 / 11244 = 0.4912
BLEU_precision = 0.6895
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.6895

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.05833333333333313,1.0269728137952615E8,1.8452841196372424E12]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 108 / 136 = 0.7941
BLEU_precision(3) = 87 / 126 = 0.6905
BLEU_precision(4) = 69 / 116 = 0.5948
BLEU_precision = 0.7557
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.7557

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Add one Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.04157087836698567,3928384.7705485113,6.658414057524934E10]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 111 / 136 = 0.8162
BLEU_precision(3) = 93 / 126 = 0.7381
BLEU_precision(4) = 78 / 116 = 0.6724
BLEU_precision = 0.7978
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.7978

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Modified Kneser-ney Smothing by Kylm
Pre/Post sept: 0.68
=> Optimizing Lambda: [-2.1439711198072344,-121857.43924850518,-0.028243239438093603]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 100 / 136 = 0.7353
BLEU_precision(3) = 76 / 126 = 0.6032
BLEU_precision(4) = 55 / 116 = 0.4741
BLEU_precision = 0.6772
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.6772

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.05833333333333313,1.0269728137952615E8,1.8452841196372424E12]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 108 / 136 = 0.7941
BLEU_precision(3) = 87 / 126 = 0.6905
BLEU_precision(4) = 69 / 116 = 0.5948
BLEU_precision = 0.7557
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.7557

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Add one Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.058333333225435276,3928384.7705485113,6.658414057524934E10]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 111 / 136 = 0.8162
BLEU_precision(3) = 93 / 126 = 0.7381
BLEU_precision(4) = 78 / 116 = 0.6724
BLEU_precision = 0.7978
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.7978

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Modified Kneser-ney Smothing by Kylm
Pre/Post sept: 0.68
=> Optimizing Lambda: [-2.1439711198072344,-121857.43924850518,-0.04492943922115955]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 100 / 136 = 0.7353
BLEU_precision(3) = 76 / 126 = 0.6032
BLEU_precision(4) = 55 / 116 = 0.4741
BLEU_precision = 0.6772
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.6772

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.05833333333333313,1.0269728137952615E8,1.8452841196372424E12]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 108 / 136 = 0.7941
BLEU_precision(3) = 87 / 126 = 0.6905
BLEU_precision(4) = 69 / 116 = 0.5948
BLEU_precision = 0.7557
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.7557

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Add one Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.058333333225435276,3928384.7705485113,6.658414057524934E10]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 111 / 136 = 0.8162
BLEU_precision(3) = 93 / 126 = 0.7381
BLEU_precision(4) = 78 / 116 = 0.6724
BLEU_precision = 0.7978
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.7978

 
	========================================================
train:20 sentences
NGRAM SMOOTH Method: Modified Kneser-ney Smothing by Kylm
Pre/Post sept: 0.68
=> Optimizing Lambda: [-7.6503833727100705,277.48735053002264,0.07656767362683481]
test:10 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 146 / 146 = 1.0000
BLEU_precision(2) = 94 / 136 = 0.6912
BLEU_precision(3) = 69 / 126 = 0.5476
BLEU_precision(4) = 47 / 116 = 0.4052
BLEU_precision = 0.6258
Length of candidate corpus = 146
Effective length of reference corpus = 146
BLEU_BP = 1.0000
  => BLEU = 0.6258

 
	========================================================
train:499 sentences
NGRAM SMOOTH Method: Kneser-ney Smoothing
Pre/Post sept: 0.68
=> Optimizing Lambda: [0.027034017423342754,1.3781151528452435E15,2.294055266540741E15]
test:526 sentences
=> Bleu Summary:
Evaluating set of 1'th candidate realization ...
BLEU_precision(1) = 12819 / 12819 = 1.0000
BLEU_precision(2) = 10433 / 12293 = 0.8487
BLEU_precision(3) = 8969 / 11768 = 0.7622
BLEU_precision(4) = 7705 / 11244 = 0.6853
BLEU_precision = 0.8159
Length of candidate corpus = 12819
Effective length of reference corpus = 12819
BLEU_BP = 1.0000
  => BLEU = 0.8159

 
	========================================================
